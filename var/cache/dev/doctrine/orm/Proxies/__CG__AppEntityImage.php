<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Image extends \App\Entity\Image implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'public', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'UploadedAt', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'originalName', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'albums', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'tags', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'publishedAt', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'mimetype', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'likes', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'comments'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'public', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'UploadedAt', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'originalName', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'albums', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'tags', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'publishedAt', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'mimetype', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'likes', '' . "\0" . 'App\\Entity\\Image' . "\0" . 'comments'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Image $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?\App\Entity\User $owner): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublic(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublic', []);

        return parent::getPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublic(bool $public): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublic', [$public]);

        return parent::setPublic($public);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadedAt', []);

        return parent::getUploadedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUploadedAt(\DateTimeInterface $UploadedAt): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUploadedAt', [$UploadedAt]);

        return parent::setUploadedAt($UploadedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalName', []);

        return parent::getOriginalName();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalName(string $originalName): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalName', [$originalName]);

        return parent::setOriginalName($originalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlbums(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlbums', []);

        return parent::getAlbums();
    }

    /**
     * {@inheritDoc}
     */
    public function addAlbum(\App\Entity\Album $album): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAlbum', [$album]);

        return parent::addAlbum($album);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAlbum(\App\Entity\Album $album): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAlbum', [$album]);

        return parent::removeAlbum($album);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addTag(\App\Entity\Tag $tag): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', [$tag]);

        return parent::addTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTag(\App\Entity\Tag $tag): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTag', [$tag]);

        return parent::removeTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishedAt', []);

        return parent::getPublishedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishedAt(?\DateTimeInterface $publishedAt): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishedAt', [$publishedAt]);

        return parent::setPublishedAt($publishedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getLikes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikes', []);

        return parent::getLikes();
    }

    /**
     * {@inheritDoc}
     */
    public function addLike(\App\Entity\Like $like): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLike', [$like]);

        return parent::addLike($like);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLike(\App\Entity\Like $like): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLike', [$like]);

        return parent::removeLike($like);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimetype(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimetype', []);

        return parent::getMimetype();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimetype(string $mimetype): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimetype', [$mimetype]);

        return parent::setMimetype($mimetype);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\App\Entity\Comment $comment): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', [$comment]);

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\App\Entity\Comment $comment): \App\Entity\Image
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', [$comment]);

        return parent::removeComment($comment);
    }

}
